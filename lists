#include <iostream>
using namespace std;

class Linked
{
	private:
		struct Node { 
				int data;
				 Node* Next;
			     };
		Node * Head;
	public:
		Linked
		{
			Head =0;
		}
		~Linked
		{
			destroy();
		}
		void destroy()
		{
			Node * one = Head;
			while (one)
			{
				
				Head = Head->Next;
				delete one;
				one = Head;
			}
		}
		void insert (int key)
		{
			Node * newNode = new Node;
			newNode->data = key;
			newNode->Next = 0;
			if (isEmpty())		
			{	Head = newNode;
				return;
			}
			else if (Head ->data > key)
			{
				newNode->Next = Head;
				Head = newNode;
				return;
			}
			Node * one = Head;
			Node * two = Head->Next;
			for(; two && two ->data < key; one = one->Next, two = two->Next);
			newNode->Next = two;
			one->Next = newNode; 
	
				
		}
		bool isEmpty()const
		{
			return Head == 0;
		}
		bool isFull() const
		{
			return false;
		}
		void print () const
		{
			Node * one = Head;
			while(one)
			{
				cout << one->data << " -> ";
				one = one->Next;
			}
			cout << endl;
		}
		void remove ( int target)
		{
			Node * one = Head;
			if (isEmpty())
				return;
			else if (Head->data == target)
			{
				Head = Head -> Next;
				delete one;
				return;
			}
			Node * two = Head->Next;
			for (; two && two->data != target; one = one->Next, two = two->Next);
			if (two->data == target)
			{
				one = two->Next;
				delete two;
				return;
			}
		}
		
};










#include <iostream>
using namespace std;

class Array
{
	int * List;
	int num_elements;
	int max;
	public:
	Array()
	{
		List = new int[5];
		num_elements =0;
		max =5;	
	}
	void print() const
	{
		if (isEmpty())
			return;
		for (int i = 0; i <num_elements; i++)
			cout <<  List[i] << " " ;
		cout << endl;
	}
	void insert (int value)
	{
		if (isFull())
			return;
		for(int i = num_elements -1; i >=0 && List[i]> value; i--)
			List[i+1] = List[i];
		List[i] = value;
		num_elements++;
			
	}
	void remove (int value)
	{
		if (isEmpty())
			return;
		int i = 0;
		for (; i < num_elements && List[i] != value;i ++);
		if (i >= num_elements)
			return;
		for (int z = i; z <num_elements; z++)
			List[z] = List[z + 1];
		num_elements --;
	}
	~Array()
	{
		delete [] List;
	}
	bool isEmpty() const
	{
		return num_elements == 0;
	}
	bool isFull() const
	{
		return num_elements == max;
	}
	
};











class Stack
{
	int * LIFO;
	int top;
	int num_elements;
	int max;
	public:
	void pop()
	{
		if (isEmpty())
			return;
		cout <<LIFO[num_elements];
		
		num_elements --;

	}
	void push(int value)
	{
		if (isFull())
			return;
		LIFO[num_elements] = value;
		num_elements ++;
		
		
	}
	Stack()
	{
		LIFO = new int[5];
	}
	~Stack()
	{
		delete [] LIFO;
	}
	bool isEmpty() const
	{
		return num_elements == 0;
	}
	bool isFull() const
	{
		return num_elements == max;
	}
	
};














int main ()
{
	Array test;
return 0;
}
